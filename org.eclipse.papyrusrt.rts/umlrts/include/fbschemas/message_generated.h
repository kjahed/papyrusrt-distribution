// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_FBSCHEMA_H_
#define FLATBUFFERS_GENERATED_MESSAGE_FBSCHEMA_H_

#include "flatbuffers/flatbuffers.h"

#include "fbschemas/signal_generated.h"

namespace FBSchema {

struct Message;

enum Type {
  Type_DEPLOYMENT = 0,
  Type_READY_SIGNAL = 1,
  Type_GO_SIGNAL = 2,
  Type_PROTOCOL_SIGNAL = 3,
  Type_MIN = Type_DEPLOYMENT,
  Type_MAX = Type_PROTOCOL_SIGNAL
};

inline Type (&EnumValuesType())[4] {
  static Type values[] = {
    Type_DEPLOYMENT,
    Type_READY_SIGNAL,
    Type_GO_SIGNAL,
    Type_PROTOCOL_SIGNAL
  };
  return values;
}

inline const char **EnumNamesType() {
  static const char *names[] = {
    "DEPLOYMENT",
    "READY_SIGNAL",
    "GO_SIGNAL",
    "PROTOCOL_SIGNAL",
    nullptr
  };
  return names;
}

inline const char *EnumNameType(Type e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesType()[index];
}

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SENDER = 4,
    VT_RECEIVER = 6,
    VT_TYPE = 8,
    VT_SIGNAL = 10,
    VT_DEPLOYMENT = 12
  };
  const flatbuffers::String *sender() const {
    return GetPointer<const flatbuffers::String *>(VT_SENDER);
  }
  const flatbuffers::String *receiver() const {
    return GetPointer<const flatbuffers::String *>(VT_RECEIVER);
  }
  Type type() const {
    return static_cast<Type>(GetField<int8_t>(VT_TYPE, 3));
  }
  const Signal *signal() const {
    return GetPointer<const Signal *>(VT_SIGNAL);
  }
  const flatbuffers::Vector<uint8_t> *deployment() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DEPLOYMENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SENDER) &&
           verifier.Verify(sender()) &&
           VerifyOffset(verifier, VT_RECEIVER) &&
           verifier.Verify(receiver()) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_SIGNAL) &&
           verifier.VerifyTable(signal()) &&
           VerifyOffset(verifier, VT_DEPLOYMENT) &&
           verifier.Verify(deployment()) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sender(flatbuffers::Offset<flatbuffers::String> sender) {
    fbb_.AddOffset(Message::VT_SENDER, sender);
  }
  void add_receiver(flatbuffers::Offset<flatbuffers::String> receiver) {
    fbb_.AddOffset(Message::VT_RECEIVER, receiver);
  }
  void add_type(Type type) {
    fbb_.AddElement<int8_t>(Message::VT_TYPE, static_cast<int8_t>(type), 3);
  }
  void add_signal(flatbuffers::Offset<Signal> signal) {
    fbb_.AddOffset(Message::VT_SIGNAL, signal);
  }
  void add_deployment(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> deployment) {
    fbb_.AddOffset(Message::VT_DEPLOYMENT, deployment);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageBuilder &operator=(const MessageBuilder &);
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> sender = 0,
    flatbuffers::Offset<flatbuffers::String> receiver = 0,
    Type type = Type_PROTOCOL_SIGNAL,
    flatbuffers::Offset<Signal> signal = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> deployment = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_deployment(deployment);
  builder_.add_signal(signal);
  builder_.add_receiver(receiver);
  builder_.add_sender(sender);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message> CreateMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *sender = nullptr,
    const char *receiver = nullptr,
    Type type = Type_PROTOCOL_SIGNAL,
    flatbuffers::Offset<Signal> signal = 0,
    const std::vector<uint8_t> *deployment = nullptr) {
  return FBSchema::CreateMessage(
      _fbb,
      sender ? _fbb.CreateString(sender) : 0,
      receiver ? _fbb.CreateString(receiver) : 0,
      type,
      signal,
      deployment ? _fbb.CreateVector<uint8_t>(*deployment) : 0);
}

inline const FBSchema::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<FBSchema::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FBSchema::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FBSchema::Message> root) {
  fbb.Finish(root);
}

}  // namespace FBSchema

#endif  // FLATBUFFERS_GENERATED_MESSAGE_FBSCHEMA_H_
